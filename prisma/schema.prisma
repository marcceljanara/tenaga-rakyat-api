// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  full_name String @db.VarChar(255)
  phone_number String @unique @db.VarChar(20)
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  role_id BigInt
  refreshTokens RefreshToken[]
  profile_picture_url String? @db.VarChar(255)
  verification_status VerificationStatus @default(UNVERIFIED)
  ktp_number_encrypted String? @db.VarChar(255)
  average_rating Decimal? @db.Decimal(2,1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  @@index([role_id])
  @@map("users")

}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model Role {
  id BigInt @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  users User[]

  @@map("roles")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique @db.VarChar(255)
  user_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expires_at  DateTime
  created_at  DateTime @default(now())

  @@map("refresh_tokens")
}
